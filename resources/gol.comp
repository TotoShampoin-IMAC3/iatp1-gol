#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(r32f, binding = 0) uniform image2D imgInput;
layout(r32f, binding = 1) uniform image2D imgOutput;

uniform ivec2 u_resolution;

uniform int u_rules[9];

float getPixel(int rel_x, int rel_y) {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 coord = texelCoord + ivec2(rel_x, rel_y);
    coord = (coord % u_resolution + u_resolution) % u_resolution;
    return imageLoad(imgInput, coord).r;
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    float neighboors = 0;
    neighboors += int(getPixel(-1, -1) == 1);
    neighboors += int(getPixel(-1, 0) == 1);
    neighboors += int(getPixel(-1, 1) == 1);
    neighboors += int(getPixel(0, -1) == 1);
    neighboors += int(getPixel(0, 1) == 1);
    neighboors += int(getPixel(1, -1) == 1);
    neighboors += int(getPixel(1, 0) == 1);
    neighboors += int(getPixel(1, 1) == 1);

    float value = getPixel(0, 0);

    for(int i = 0; i < 8; i++) {
        if(neighboors == i) {
            if(u_rules[i] == 1) {
                value = 1;
            } else if(u_rules[i] == 2) {
                value = value;
            } else {
                value = 0;
            }
        }
    }

    imageStore(imgOutput, texelCoord, vec4(value));
}
